---
description: testing, tests, unit tests, swift testing
globs: 
alwaysApply: false
---
# Swift Testing Framework Guidelines for Anchor Project

Follow these modern Swift Testing patterns and practices when writing tests for the multi-platform Anchor project (CLI, menu bar app, and mobile iOS app).

## Test Organization & Structure

- Use `@Test` attribute for all test functions instead of naming conventions
- Organize tests into `@Suite` structures that mirror the production code architecture
- Use descriptive test names in the `@Test("description")` format
- Group related tests into logical suites (e.g., `BlueskyServiceTests`, `OverpassServiceTests`)

## Assertion Strategy

- Use `#expect()` for most validations - it continues execution on failure to surface multiple issues
- Use `#require()` only for critical preconditions where continuing the test would be meaningless
- Prefer natural Swift expressions: `#expect(user.name == "Alex")` instead of specialized functions
- Use `try #require()` for safe optional unwrapping instead of `XCTUnwrap`

## State Management & Lifecycle

- Use `struct` for test suites when possible for automatic state isolation
- Use `class` or `actor` suites only when `deinit` cleanup is needed
- Put all setup logic in `init()` - runs before each test automatically
- Put cleanup logic in `deinit` - runs after each test automatically
- Define system under test (SUT) as `let` properties initialized in `init()`

## Parameterized Testing

- Use `@Test(arguments: collection)` to test multiple inputs with a single test function
- Use `zip(inputs, expectedOutputs)` for paired input/output testing
- Avoid cartesian products unless explicitly testing all combinations
- Leverage parameterized tests for API response validation and edge cases

## Async & Concurrency Testing

- Mark test functions `async` when testing async code
- Use `await confirmation()` for testing callbacks, delegates, and notifications
- Use `expectedCount: 0` in confirmations to verify events never happen
- Bridge legacy completion handlers with `withCheckedThrowingContinuation`

## Error Handling & Validation

- Use `#expect(throws: ErrorType.self)` for specific error type validation
- Use `#expect(throws: (any Error).self)` for general error checking
- Use `#expect(throws: Never.self)` to explicitly assert no error is thrown
- Inspect thrown errors: `let error = #expect(throws: MyError.self) { ... }`

## Tagging Strategy for Anchor Project

Define tags in a central location:
```swift
extension Tag {
    @Tag static var fast: Self      // Quick unit tests
    @Tag static var network: Self   // Tests requiring network
    @Tag static var auth: Self      // Authentication-related tests
    @Tag static var location: Self  // CoreLocation tests
    @Tag static var cli: Self       // Command-line interface tests
    @Tag static var macos: Self     // macOS-specific tests
    @Tag static var ios: Self       // iOS-specific tests
    @Tag static var ui: Self        // SwiftUI/UI tests
    @Tag static var regression: Self // Regression tests
    @Tag static var flaky: Self     // Known flaky tests
}
```

Apply tags to organize and filter tests:
- `@Test("Login flow", .tags(.auth, .network))`
- `@Test("iOS location permissions", .tags(.location, .ios))`
- `@Test("Menu bar interface", .tags(.ui, .macos))`
- Use `.serialized` trait for tests that must run sequentially
- Use `.disabled("reason")` for temporarily broken tests
- Use `.enabled(if: condition)` for conditional test execution

## Service Layer Testing Patterns

For API services (Bluesky, Overpass):
- Mock all external dependencies in `init()`
- Test both success and failure scenarios
- Use parameterized tests for different response formats
- Validate `Codable` implementations with real API response samples

For CoreLocation services:
- Mock `CLLocationManager` for deterministic testing
- Test permission states and error conditions
- Validate coordinate transformations and bounding box calculations
- Handle platform differences (macOS vs iOS location APIs)

## SwiftData Testing Considerations

**CRITICAL**: Avoid creating real SwiftData `@Model` objects in tests due to ModelContainer requirements:
- Use protocol-based mocking (e.g., `AuthCredentialsProtocol` with `MockAuthCredentials`)
- Test authentication logic indirectly through service integration tests
- Run full SwiftData tests only in environments with proper ModelContainer setup
- Focus unit tests on business logic, not SwiftData model creation

## Platform-Specific Testing Patterns

### CLI Command Testing (AnchorCLI)
- Test argument parsing separately from business logic
- Mock service dependencies using dependency injection
- Validate output formatting and error messages
- Test help text and usage information

### Menu Bar App Testing (Anchor - macOS)
- Test SwiftUI view models and state management
- Mock AnchorKit services for UI tests
- Validate menu bar integration and popover behavior
- Test macOS-specific features (notifications, shortcuts)

### Mobile App Testing (AnchorMobile - iOS)
- Test responsive layouts for different screen sizes
- Validate touch interactions and gestures
- Test iOS-specific features (haptics, sharing, background refresh)
- Use XCUITest for complex user journey testing

## Migration from XCTest

When migrating existing XCTest code:
- Both frameworks can coexist in the same target
- Convert assertions: `XCTAssertEqual(a, b)` → `#expect(a == b)`
- Convert setup: `setUpWithError()` → `init() throws`
- Convert teardown: `tearDownWithError()` → `deinit`
- Convert unwrapping: `try XCTUnwrap(value)` → `try #require(value)`

## Test Performance & Reliability

- Enable parallel execution (default) for faster test runs
- Use `.timeLimit(.seconds(30))` trait for tests that might hang
- Mark non-thread-safe legacy tests with `.serialized` temporarily
- Focus on the F.I.R.S.T. principles: Fast, Isolated, Repeatable, Self-validating, Timely

## Example Test Suite Structure

```swift
@Suite("Bluesky Authentication Service")
final class BlueskyServiceTests {
    let mockURLSession: URLSession
    let sut: BlueskyService
    
    init() throws {
        // Setup runs before each test
        self.mockURLSession = URLSession.mock()
        self.sut = BlueskyService(urlSession: mockURLSession)
    }
    
    deinit {
        // Cleanup runs after each test
        mockURLSession.invalidateAndCancel()
    }
    
    @Test("Successful authentication", .tags(.auth, .fast))
    func successfulLogin() async throws {
        // Test implementation using mock credentials
        // Avoid creating real AuthCredentials @Model objects
    }
    
    @Test("Authentication with invalid credentials", 
          arguments: ["", "invalid@handle", "@toolong.handle"])
    func loginFailsWithInvalidCredentials(handle: String) async {
        await #expect(throws: BlueskyError.invalidCredentials) {
            try await sut.authenticate(handle: handle, password: "password")
        }
    }
}
```

## Multi-Platform Test Structure

The Anchor project testing structure includes:

### Core Library Tests
- [AnchorKit/Tests/AnchorKitTests/](mdc:AnchorKit/Tests/AnchorKitTests) - Shared business logic tests
  - Models validation (avoiding SwiftData ModelContainer issues)
  - Service layer tests with protocol-based mocking
  - Cross-platform utility functions

### Platform-Specific Tests
- [AnchorTests/](mdc:AnchorTests) - Menu bar app tests (macOS)
  - SwiftUI view tests
  - Menu bar integration tests
  - macOS-specific functionality

- [AnchorMobileTests/](mdc:AnchorMobileTests) - Mobile app unit tests (iOS)
  - iOS-specific view model tests
  - Mobile app business logic

- [AnchorMobileUITests/](mdc:AnchorMobileUITests) - Mobile app UI tests (iOS)
  - End-to-end user journey tests
  - iOS app navigation and interaction tests

## Focus Areas for Testing

Prioritize testing for:
- Service layer validation (Bluesky API, Overpass API, CoreLocation)
- Model validation (`Codable` implementations, data transformations)
- CLI command parsing and execution
- Authentication flow and token management (using protocol mocks)
- Cross-platform compatibility of shared AnchorKit code
- Platform-specific UI interactions and state management

Always prioritize test clarity and maintainability over brevity. Use descriptive test names and organize tests logically to make the test suite a valuable living documentation of the system's behavior across all platforms.
